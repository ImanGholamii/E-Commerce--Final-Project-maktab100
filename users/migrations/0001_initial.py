# Generated by Django 4.2 on 2024-02-26 13:49

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Created at this time', verbose_name='Created time')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Modified at this time', verbose_name='Modified time')),
                ('username', models.CharField(blank=True, max_length=150, null=True, unique=True, verbose_name='Username')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('phone', models.CharField(help_text='Enter your phone number.', max_length=20, unique=True, validators=[django.core.validators.RegexValidator(code='invalid_IR_phone_number', message='Phone number must be start with +98 or 0 in IR format.', regex='^(\\+98|0)?9\\d{9}$')], verbose_name='Phone')),
                ('registration_date', models.DateTimeField(auto_now_add=True, verbose_name='Registration Date')),
                ('is_customer', models.BooleanField(default=True)),
                ('is_employee', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OtpCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
                ('otp_code', models.PositiveIntegerField()),
                ('created', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Created at this time', verbose_name='Created time')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Modified at this time', verbose_name='Modified time')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/', verbose_name='Profile Picture')),
                ('is_subscribed', models.BooleanField(default=False, verbose_name='Is Subscribed')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Created at this time', verbose_name='Created time')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Modified at this time', verbose_name='Modified time')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('role', models.CharField(choices=[('manager', 'Manager'), ('operator', 'Operator'), ('viewer', 'Viewer')], max_length=100, verbose_name='Role')),
                ('is_manager', models.BooleanField(default=False, verbose_name='Is Manager')),
                ('is_operator', models.BooleanField(default=False, verbose_name='Is Operator')),
                ('is_viewer', models.BooleanField(default=False, verbose_name='Is Viewer')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state', models.CharField(max_length=100, verbose_name='State')),
                ('city', models.CharField(max_length=100, verbose_name='City')),
                ('street', models.CharField(max_length=255, verbose_name='Street')),
                ('alley', models.CharField(max_length=50, null=True, verbose_name='Alley')),
                ('no', models.CharField(default=0, max_length=50, verbose_name='NO')),
                ('unit_number', models.CharField(default=0, max_length=50, verbose_name='Unit Number')),
                ('postal_code', models.CharField(max_length=20, verbose_name='Postal Code')),
                ('is_default', models.BooleanField(default=False, verbose_name='Is Default')),
                ('additional_info', models.TextField(blank=True, verbose_name='Additional Info')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Created at this time', verbose_name='Created time')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Modified at this time', verbose_name='Modified time')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/', verbose_name='Profile Picture')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], max_length=10, null=True, verbose_name='Gender')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Date of Birth')),
                ('bio', models.TextField(blank=True, null=True, verbose_name='Bio')),
                ('social_media', models.CharField(blank=True, max_length=255, null=True, verbose_name='Social Media')),
                ('interests', models.TextField(blank=True, null=True, verbose_name='Interests')),
                ('addresses', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_profiles', to='users.address', verbose_name='Address')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
